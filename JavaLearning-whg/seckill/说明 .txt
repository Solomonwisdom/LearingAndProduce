

锁、网络延迟、GC->存储过程

前端控制：暴露接口，按钮防重复
动静态数据分离：CDN缓存，后端缓存

高并发优化：
1.使用Redis作为缓存
2.先插入购买明细，再减库存（缩短行级锁时间）
3.使用MySQL存储过程执行更新操作


系统可能用到哪些服务？
CDN
WebServer:Nginx(负载均衡)+Jetty
Redis
MySQL

一部分流量已经被cdn缓存锁拦截
不过秒杀的操作,秒杀的地址获取这样的请求不方便放入cdn中,所以访问到我们的服务器
我们的服务器会通过我们的dns查找到我们的地址
一般找到的是nginx地址,nginx一般部署到不同的机房,比如电信,移动,联通
这样的话智能的dns会根据用户的请求ip地址来智能的dns解析来请求最近的Nginx服务器
nginx还会给我们的服务器做负载均衡
之后会有jetty tomcat等我们的逻辑集群,用来放置我们的代码
访问到tomcat jetty服务器的时候,会用到缓存集群redis(根据数据量,使用规模,一般用一个redis集群)
会根据使用规模来调整集群
mysql,根据关键的id来分库分表,这里关键的id肯定是秒杀的id
因为同一个秒杀的id应该放在同一个数据库中,这样事务才会在同一个数据库中生效
根据seckillId来取模,分表(一般分表都是512张表,1024张表等等这样的翻倍)
然后按照负载及读写的请求量来做到分库 (分库分表框架,阿里巴巴的TDDL)
这样保证了同一个秒杀单在同一个数据库中完成事务,同时保证如果是非常庞大的请求,
可以把流量和读写的事务量分发到不同的数据库中
还会有一个统计分析组件,在多个DB中拉取秒杀单来做分析(类似于BI系统,各种数据统计报表)